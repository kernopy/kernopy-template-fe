import { useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card } from '@/components/ui/card';

type GaugeCardProps = {
    title: string;
    value?: number;
    route?: string;
    show?: 'value' | 'status';
    status?: boolean;
};

const GaugeSVG = () => {
    return (
        <svg width="100%" height="150" viewBox="0 0 253 127" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.723 105.257 248.539 91.2479 243.074 78.0536C236.72 62.7131 227.406 48.7745 215.665 37.0335C203.924 25.2924 189.985 15.9789 174.645 9.62471C159.305 3.27051 142.863 4.20813e-05 126.259 4.28071e-05C109.654 4.35329e-05 93.2125 3.27051 77.8721 9.62472C62.5317 15.9789 48.593 25.2924 36.852 37.0335C25.111 48.7745 15.7975 62.7132 9.44326 78.0536C3.978 91.2479 0.794007 105.257 0.0101053 119.483C-0.201379 123.322 2.93469 126.44 6.77859 126.44H39.5152C43.3591 126.44 46.4437 123.318 46.7786 119.489C47.4866 111.394 49.4283 103.441 52.5484 95.9083C56.5578 86.2285 62.4346 77.4333 69.8432 70.0247C77.2518 62.6161 86.047 56.7393 95.7268 52.7298C105.407 48.7203 115.781 46.6567 126.259 46.6567C136.736 46.6567 147.111 48.7203 156.79 52.7298C166.47 56.7393 175.265 62.6161 182.674 70.0247C190.083 77.4332 195.959 86.2285 199.969 95.9083C203.089 103.441 205.031 111.394 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#008A1E" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.111 94.1495 242.119 69.76 226.622 49.5353C209.71 27.465 185.995 11.5846 159.147 4.35226C132.299 -2.88007 103.816 -1.06101 78.1066 9.52788C54.547 19.2312 34.5204 35.8031 20.588 57.0079C18.4773 60.2204 19.6223 64.4926 22.946 66.4235L51.2529 82.8676C54.5767 84.7984 58.8122 83.6481 61.0252 80.5052C69.7312 68.1413 81.8045 58.4638 95.8747 52.6687C112.097 45.9871 130.07 44.8393 147.011 49.4029C163.952 53.9665 178.916 63.987 189.587 77.9133C198.843 89.9919 204.421 104.425 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#00AA25" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.411 99.5851 245.623 80.1918 235.576 62.9052C224.362 43.6093 208.239 27.6255 188.847 16.5778C169.455 5.53008 147.485 -0.187901 125.167 0.0047537C105.174 0.177347 85.5403 5.08817 67.8644 14.2919C64.455 16.0672 63.3715 20.3552 65.3316 23.6618L82.0252 51.8222C83.9853 55.1288 88.2439 56.1901 91.7086 54.5255C102.255 49.4589 113.814 46.7611 125.57 46.6596C139.652 46.5381 153.516 50.1461 165.752 57.1172C177.988 64.0883 188.162 74.174 195.238 86.3497C201.146 96.5143 204.719 107.833 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#DDA200" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.723 105.257 248.539 91.2479 243.074 78.0536C236.72 62.7131 227.406 48.7745 215.665 37.0335C203.924 25.2924 189.985 15.9789 174.645 9.62471C161.451 4.15945 147.442 0.975457 133.215 0.191554C129.377 -0.0199305 126.259 3.11614 126.259 6.96004V39.6967C126.259 43.5406 129.381 46.6251 133.21 46.96C141.305 47.668 149.258 49.6098 156.79 52.7298C166.47 56.7393 175.265 62.6161 182.674 70.0247C190.083 77.4332 195.959 86.2285 199.969 95.9083C203.089 103.441 205.031 111.394 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#EEAE00" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.388 99.1721 245.382 79.3933 234.955 61.8471C224.528 44.3009 210.027 29.57 192.722 18.8773C189.452 16.8568 185.213 18.1204 183.376 21.4966L167.726 50.2503C165.888 53.6266 167.156 57.8283 170.359 59.9531C180.326 66.564 188.705 75.3494 194.846 85.682C200.986 96.0146 204.697 107.574 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#FB0000" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.43 99.9322 245.826 80.8957 236.137 63.8797C234.235 60.5393 229.91 59.6175 226.679 61.7003L199.164 79.4385C195.934 81.5213 195.033 85.8167 196.826 89.2166C201.783 98.6127 204.813 108.906 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#B40000" />
        </svg>
    );
};

const StatusSVG = () => {
    return (
        <svg width="100%" height="150" viewBox="0 0 253 127" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.723 105.257 248.539 91.2479 243.074 78.0536C236.72 62.7131 227.406 48.7745 215.665 37.0335C203.924 25.2924 189.985 15.9789 174.645 9.62471C159.305 3.27051 142.863 4.20813e-05 126.259 4.28071e-05C109.654 4.35329e-05 93.2125 3.27051 77.8721 9.62472C62.5317 15.9789 48.593 25.2924 36.852 37.0335C25.111 48.7745 15.7975 62.7132 9.44326 78.0536C3.978 91.2479 0.794007 105.257 0.0101053 119.483C-0.201379 123.322 2.93469 126.44 6.77859 126.44H39.5152C43.3591 126.44 46.4437 123.318 46.7786 119.489C47.4866 111.394 49.4283 103.441 52.5484 95.9083C56.5578 86.2285 62.4346 77.4333 69.8432 70.0247C77.2518 62.6161 86.047 56.7393 95.7268 52.7298C105.407 48.7203 115.781 46.6567 126.259 46.6567C136.736 46.6567 147.111 48.7203 156.79 52.7298C166.47 56.7393 175.265 62.6161 182.674 70.0247C190.083 77.4332 195.959 86.2285 199.969 95.9083C203.089 103.441 205.031 111.394 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#6a040f" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.111 94.1495 242.119 69.76 226.622 49.5353C209.71 27.465 185.995 11.5846 159.147 4.35226C132.299 -2.88007 103.816 -1.06101 78.1066 9.52788C54.547 19.2312 34.5204 35.8031 20.588 57.0079C18.4773 60.2204 19.6223 64.4926 22.946 66.4235L51.2529 82.8676C54.5767 84.7984 58.8122 83.6481 61.0252 80.5052C69.7312 68.1413 81.8045 58.4638 95.8747 52.6687C112.097 45.9871 130.07 44.8393 147.011 49.4029C163.952 53.9665 178.916 63.987 189.587 77.9133C198.843 89.9919 204.421 104.425 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#9d0208" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.411 99.5851 245.623 80.1918 235.576 62.9052C224.362 43.6093 208.239 27.6255 188.847 16.5778C169.455 5.53008 147.485 -0.187901 125.167 0.0047537C105.174 0.177347 85.5403 5.08817 67.8644 14.2919C64.455 16.0672 63.3715 20.3552 65.3316 23.6618L82.0252 51.8222C83.9853 55.1288 88.2439 56.1901 91.7086 54.5255C102.255 49.4589 113.814 46.7611 125.57 46.6596C139.652 46.5381 153.516 50.1461 165.752 57.1172C177.988 64.0883 188.162 74.174 195.238 86.3497C201.146 96.5143 204.719 107.833 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#d00000" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.723 105.257 248.539 91.2479 243.074 78.0536C236.72 62.7131 227.406 48.7745 215.665 37.0335C203.924 25.2924 189.985 15.9789 174.645 9.62471C161.451 4.15945 147.442 0.975457 133.215 0.191554C129.377 -0.0199305 126.259 3.11614 126.259 6.96004V39.6967C126.259 43.5406 129.381 46.6251 133.21 46.96C141.305 47.668 149.258 49.6098 156.79 52.7298C166.47 56.7393 175.265 62.6161 182.674 70.0247C190.083 77.4332 195.959 86.2285 199.969 95.9083C203.089 103.441 205.031 111.394 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#70e000" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.388 99.1721 245.382 79.3933 234.955 61.8471C224.528 44.3009 210.027 29.57 192.722 18.8773C189.452 16.8568 185.213 18.1204 183.376 21.4966L167.726 50.2503C165.888 53.6266 167.156 57.8283 170.359 59.9531C180.326 66.564 188.705 75.3494 194.846 85.682C200.986 96.0146 204.697 107.574 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#38b000" />
            <path d="M245.739 126.44C249.583 126.44 252.719 123.322 252.507 119.483C251.43 99.9322 245.826 80.8957 236.137 63.8797C234.235 60.5393 229.91 59.6175 226.679 61.7003L199.164 79.4385C195.934 81.5213 195.033 85.8167 196.826 89.2166C201.783 98.6127 204.813 108.906 205.739 119.489C206.074 123.318 209.158 126.44 213.002 126.44H245.739Z" fill="#008000" />
        </svg>
    );
};

export default function Gauge({ title, value, route, show = 'value', status }: GaugeCardProps) {
    const navigate = useNavigate();

    const { clampedValue, displayText, displayColor } = useMemo(() => {
        if (typeof status === 'boolean') {
            return {
                clampedValue: status ? 75 : 25,
                displayText: status ? 'Active' : 'Not Active',
                displayColor: status ? '#0E6D1D' : '#942323',
            };
        } else if (typeof value === 'number') {
            const clamped = Math.max(0, Math.min(100, value));
            const statusObj =
                clamped <= 40
                    ? { label: 'Normal', color: '#0E6D1D' }
                    : clamped <= 60
                        ? { label: 'Warning', color: '#CC9600' }
                        : { label: 'Critical', color: '#942323' };
            return {
                clampedValue: clamped,
                displayText: show === 'status' ? statusObj.label : `${clamped}`,
                displayColor: statusObj.color,
            };
        } else {
            throw new Error('Either "value" or "status" must be provided');
        }
    }, [value, show, status]);

    const rotation = useMemo(() => {
        return (clampedValue / 100) * 180 - 90;
    }, [clampedValue]);

    return (
        <Card
            onClick={() => route && navigate(route)}
            className="rounded-xl flex flex-col justify-between items-center px-4 py-6 cursor-pointer"
        >
            {/* Header */}
            <div className="bg-gray-300 dark:bg-[#222] py-2 rounded-[4px] w-full text-center text-[22px] font-semibold items-center">
                <h2 className="text-black dark:text-white text-[22px] font-medium px-2">{title}</h2>
            </div>

            {/* Gauge */}
            <div className="relative w-full max-w-[260px] h-[127px]">
                {typeof status === 'boolean' ? <StatusSVG /> : <GaugeSVG />}

                {/* Needle */}
                <div
                    className="absolute left-1/2 bottom-0 origin-bottom"
                    style={{ transform: `translateX(-50%) rotate(${rotation}deg)` }}
                >
                    <div className="w-[2px] h-[70px] bg-black dark:bg-white rounded-full"></div>
                    <div className="w-4 h-4 bg-black dark:bg-white rounded-full absolute -bottom-2 left-1/2 -translate-x-1/2"></div>
                </div>
            </div>

            {/* Value/Status Display */}
            <div
                className="text-white text-[21px] font-medium text-lg px-4 py-1 rounded-md border border-black dark:border-white shadow-sm"
                style={{
                    backgroundColor: displayColor,
                }}
            >
                {displayText}
            </div>
        </Card>
    );
}
